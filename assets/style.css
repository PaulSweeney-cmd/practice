/*! CSS SELECTORS - TYPE */
/*? A type selector is selecting an element of a given type */

p {
  color: aliceblue;
}

/*! CSS SELECTORS - UNIVERSAL SELECTOR */
/*? This selects ALL elements of any type */

* {
  font-size: 55px;
}

/*! CSS SELECTORS - CLASS ATTRIBUTE */
/*? Classes can be used multiple times throughout an HTML document */

/* <h1 class='example-class'></h1> */

.example-class {
  color: aliceblue;
}

/*! CSS SELECTORS - ID ATTRIBUTE */
/*? Often used to style an element uniquely */
/*? An ID can only be used once per page */

/* <h1 id='example-id'></h1> */

#example-id {
  color: aqua;
}

/*? ID's and classes can be used to target a html element */
/* <h1 class='green bold' id='an-id'></h1> */


/*! CSS SELECTORS - MULTIPLE CLASSES */
/*? using two classes with two styles for one html element */

/*? HTML */
/* <h1 class='green bold'></h1> */

/*? CSS */
.green {
  color: green;
}
.bold {
  font-weight: bold;
}

/*! CSS SELECTORS - ATTRIBUTES */
/*? Attributes are used by html elements to add extra detai or functinality */
/*? HTML elements with attributes: */
  /* 
    <img src="" alt="">
    <video src=""></video>
    <a href=""></a>
    <p style=""></p>
    <html lang="en-US"></html>
    <p class=""></p>
    <p id=""></p> 
  */

/*! CSS SELECTORS - ATTRIBUTE SELECTOR [] */
/*? These are used to target a html element that already contains an attribute */
/*? Can be used to apply styling to those contained attributes: */
/*? No new html markup with an ID or class needs to be created to target a html element

  /*? targeting ALL href attributes: */
  /* <a href=""></a> */

  a[href]{
    color: aquamarine;
  }

  /*? selecting an element where the attribute contains an instance of a specified value: */
  /* <img src='/images/seasons/cold/winter.jpg'> */

  img[src*='winter']{
    height: 50px;
  }

/*! CSS SELECTORS - PSUEDO CLASSES */

/* hovering over a paragraph on a web page */
p:hover {
  color: blue;
}

/* clicking on an input box to show a blue border: */
input:focus {
  border-color: aqua;
}

/* clicking on a link to open a web page, this link then becomes purple: */
a:visited {
  color: purple;
}

/* filling a form out the submit button stays gray until all fields have been filled out  */
button:disabled {
  color: gray;
}

/* targeting an instance in a link to make that link only highlight */
a[href*='example']:hover {
  color: blueviolet;
}

/*! CSS SELECTORS - SPECIFICITY */
/*? Specificity is the order by which the browser decides which CSS styles will be displayed */
/*? IDs are the most specific selector in CSS, followed by classes, and finally, type */
/*? Type = element you're targeting like h1, h2, p etc. */
/*? Adding more specificity to a type will override using just a standard type */

/* To make styles easy to edit, it’s best to style with a type selector, if possible. If not, add a class selector. 
If that is not specific enough, then consider using an ID selector. */

                                        /* EXAMPLE: */            
/*? ID selector styling would overthrow all other styling for a element as an ID is the most specific selector */
  /* <h5 class='author-class' id='author-id'></h5> */

/*! CSS SELECTORS - CHAINING: The combination of multiple selectors*/

/* This chain only targets the h1 element with a class of 'multiple' */
h1.multiple {
  color: aqua;
}

/*! CSS SELECTORS - DESCENDANT COMBINATOR */
/*? Suitable for selecting elements that are nested */

/* Below is a div with class name of 'description', inside this div is a h5 element */
  /* 
    <div class="description">
      <h5></h5>
    </div> 
  */

/* using the descendant combinator to style the h5 element within the div with that class name only */
  .description h5 {
    color: blueviolet;
  }

/*! CSS SELECTORS - MULTIPLE SELECTORS */
/* Avoids repetative code */
/* Useful for targeting multiple selectors that have the exact same styling */
                                        /* Before */
h1 {
  font-family: Georgia;
}
.menu {
  font-family: Georgia;
}

                                        /* After */
h1,
.menu {
  font-family: Georgia;
}

/** -------------------------------------------------------------------------------------------------------------------- **/

/*! CSS BOX MODEL */
/*
- Box model is a concept on how elements are positioned 
- Browsers load HTML elements with default position values. This can cause issues to the user experience. 
*/

/* 
- width and height: The width and height of the content area
- padding: The amount of space between the content area and the border.
- border: The thickness and style of the border surrounding the content area and padding.
- margin: The amount of space between the border and the outside edge of the element. 
*/

/*! CSS BOX MODEL - PIXELS */
/* 
- Pixels allow you to set the exact size of an element’s box (width and height). 
- When the width and height of an element are set in pixels, it will be the same size on all devices — an element that fills a laptop screen will overflow a mobile screen. 
*/

/*! CSS BOX MODEL - BORDER */
/* 
- A border is a line that surrounds an element, like a frame around a painting. 
- Borders can be set with a specific width, style, and color 
*/

/*! CSS BOX MODEL - PADDING */
/* 
- The space between the contents of a box and the borders of a box is known as padding. Padding is like the space between a picture and the frame surrounding it.
- The padding property is often used to expand the background color and make the content look less cramped.
- You can be more specific with padding by specifying top, right, bottom and left to target.
- Shorthand padding consists of setting up padding on a single line:

    div.headline {
      color: aqua;
      padding: 20px 30px; 20px for top and bottom, 30px for right and left
    }

*/

/*! CSS BOX MODEL - MARGIN */
/* 
- Margin refers to the space directly outside of the elements box. 
- The margin property is used to specify the size of this space.
*/

  /*! MARGIN - AUTO
  - This will center the div in its containing element, 0 sets the top and bottom margins to zero
  - The auto value tells the browser to adjust the left and right margins until centered
  - In order to center an element, a width must be set for that element. Otherwise, the width of the div will be automatically set to the full width of its containing element
  */

  div.headline {
    width: 400px; /* the width of the div is set to 400 pixels, which is less than the width of most screens. This will cause the div to center within a containing element that is greater than 400 pixels wide. */
    margin: 0 auto; /* sets the top and botom margins to 0 and left and right to auto to center the div within a containing element that is bigger than 400px */
  }

  /*! MARGIN - VERTICAL COLLAPSE
  - Vertical margins collapse which means the element with the greater vertical margin will ovveride the element without
  - Horizontal margins will always be displayed and added together and wont collapse.

/*! CSS BOX MODEL - MINIMUM AND MAXIMUM WIDTH AND HEIGHT */
/* 
- Commonly used for screens of different sizes
- min-width: minimum width of an element’s box.
- max-width: maximum width of an element’s box.
- min-height: minimum height of an element’s box.
- max-height: maximum height of an element’s box.
*/

  p {
    min-width: 300px; /* paragraphs will not shrink below 300px */
    max-width: 600px; /* paragraphs will not exceed above 600px */
  }

/*! CSS BOX MODEL - OVERFLOW */

  p {
    overflow: hidden; /* Hidden is set if the content overflows its box, this stops content from overlapping */
    overflow: scroll; /* Scroll is set for content to scroll if it doesnt fill the elements box in a certain screen size. */
  }

/*! CSS BOX MODEL - RESETTING DEFAULTS */
/* 
- User agent (or browser) instills default settings for html elememnts in the abscence of an external style sheet
- Resetting therse default settings should be the first rule in CSS styling, this allows the developer to work with their own styles 
*/

  body {
    margin: 0;
    padding: 0;
  }

/*! CSS BOX MODEL - VISIBILITY */
/* 
- Alows an element to be hidden or displayed in the browser
- These elements will still be displayed in the source code though 
*/

  p {
    visibility: collapse; /* Collapses an element in the browser */
    visibility: visible; /* Displays an element in the browser */
    visibility: hidden; /* Hides an element in the browser. The page won't adjust, it will still leave an empty space where the element is intended to display.*/
    display: none; /* Completely removes an element in the browser */
  }

/*! CSS BOX MODEL: CHANGING THE BOX MODEL - CONTENT BOX */

div.box {
  box-sizing: content-box; /* Default value box model used by the brower */
}

/*! CSS BOX MODEL: CHANGING THE BOX MODEL - BORDER BOX */
/* 
- The new box model simply makes sure that the dimensions of elements remains the same regardless of border width and padding.
- The box-sizing property controls the box model used by the browser.
- The border-box model is not affected by border thickness or padding.
*/
  * {
    box-sizing: border-box; /* Resets the default value for all html box models */
  }

  h1 {
    border: 1px solid black;
    height: 200px;
    width: 300px;
    padding: 10px;
  }

/** -------------------------------------------------------------------------------------------------------------------- **/

/*! DISPLAYING AND POSITIONING - FLOW OF HTML */
/* 
A browser will render the elements of an HTML document that has no CSS from left to right, top to bottom, in the same order as they exist in the document. This is called the flow of elements in HTML. 
*/

/*! DISPLAYING AND POSITIONING - POSITION */
/* 
The default position of an element can be changed by setting its position property. The position property can take one of five values:
  - static:  The default value (it does not need to be specified)
  - relative
  - absolute
  - fixed
  - sticky
*/

/*! DISPLAYING AND POSITIONING - POSITION: RELATIVE */
/* 
- This value allows you to position an element relative to its default static position on the web page.
- This position stays in the normal flow of the document as does static.
*/

  .green-box {
    background-color: green;
    /* Although the relative value has been added it needs to be specified more to move it like stated below */
    position: relative;
    top: 50px; /* Moves the element down from the top by 50px */
    left: 120px; /* Moves the element away from the left by 120px */
  }

/*! DISPLAYING AND POSITIONING - POSITION: ABSOLUTE */
/*
- Removed from the document flow. When a user scrolls, this element will stay at it's offset position.
- When an element’s position is set to absolute, all other elements on the page will ignore the element and act like it is not present on the page.
- The element will be positioned relative to its closest positioned parent element, while offset properties can be used to determine the final position from there. 
*/

/*! DISPLAYING AND POSITIONING - POSITION: FIXED */
/*
- Removed from the document flow. When a user scrolls, this element will stay at it's offset position.
- Fixes and element in place when a user is scrolling down or up the page
- This setting comes in useful for navigation bars
*/

  .nav-bar {
    background-color: green;
    position: fixed;
    top: 0px; 
    left: 0px;
  }

/*! DISPLAYING AND POSITIONING - POSITION: STICKY */
/* 
The sticky value is another position value that keeps an element in the document flow as the user scrolls, but sticks to a specified position as the page is scrolled further. 
*/

  .box-bottom {
    background-color: darkgreen;
    position: sticky;
    top: 240px; /* When a user scrolls down and the div reaches 240px from the top this will stick at its relative position until it reaches the bottom of the page */
  }

/** -------------------------------------------------------------------------------------------------------------------- **/

/*! DISLAY AND POSITIONING - Z INDEX */
/* 
- Z index positions content properly if they overlap
- The z-index property controls how far back or how far forward an element should appear on the web page when elements overlap.
- Often though of as "depth elements"
- Accept integers to tell the browser how what order they should be displayed in
*/